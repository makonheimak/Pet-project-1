openapi: 3.0.0
info:
  title: API 
  version: 1.0.0

paths:
  /tasks:
    get:
      operationId: GetTasks
      summary: Get all tasks
      tags:
        - tasks
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

    post:
      operationId: PostTask
      summary: Create a new task
      tags:
        - tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/user/{user_id}:
    get:
      operationId: GetTasksByUserID
      summary: Get all tasks for a specific user
      tags:
        - tasks
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

  /tasks/{id}:
    patch:
      operationId: UpdateTask
      summary: Update a task by id
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          description: Task ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Task data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Updated task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

    delete:
      operationId: DeleteTask
      summary: Delete a task by id
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          description: Task ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Task deleted successfully

  /users:
    get:
      operationId: GetUsers
      summary: Get all users
      tags:
        - users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      operationId: PostUser
      summary: Create a new user
      tags:
        - users
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  
  /users/{id}:
    patch:
      operationId: PatchUserByID
      summary: Update a user by ID
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: Fields to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      operationId: DeleteUserByID
      summary: Delete a user by ID
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
        task:
          type: string
        user_id:
          type: integer
          format: int64
      required:
        - id
        - task
        - user_id

    TaskCreate:
      type: object
      properties:
        task:
          type: string
        user_id:
          type: integer
          format: int64
      required:
        - task
        - user_id
    
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - email
        - password

    UserUpdate:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
